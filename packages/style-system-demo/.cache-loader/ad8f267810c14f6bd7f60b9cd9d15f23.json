{"remainingRequest":"/home/rpoetz/Development/indoqa/indoqa-react/node_modules/ts-loader/index.js??ref--4-oneOf-2-1!/home/rpoetz/Development/indoqa/indoqa-react/packages/style-system-demo/src/main/style-guide/StyleGuide.tsx","dependencies":[{"path":"/home/rpoetz/Development/indoqa/indoqa-react/packages/style-system-demo/src/main/style-guide/StyleGuide.tsx","mtime":1549803032956},{"path":"/home/rpoetz/Development/indoqa/indoqa-react/node_modules/cache-loader/dist/cjs.js","mtime":1547145562332},{"path":"/home/rpoetz/Development/indoqa/indoqa-react/node_modules/ts-loader/index.js","mtime":1547145562587}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport { Box, Grid, Panel, Row } from '@indoqa/style-system';\nimport * as React from 'react';\nimport { FelaComponent } from 'react-fela';\nimport { Route } from 'react-router';\nimport ColorsPanel from './colors/ColorsPanel';\nimport ContentHeader from './ContentHeader';\nimport ContentPanel from './ContentPanel';\nimport Heading from './Heading';\nimport Logo from './menu/Logo';\nimport MenuGroup from './menu/MenuGroup';\nimport MenuHeader from './menu/MenuHeader';\nimport MenuItem from './menu/MenuItem';\nimport StyleGuideMenu from './menu/StyleGuideMenu';\nimport OverviewPanel from './overview/OverviewPanel';\nimport StyleGuideThemeContext from './sgtheme/SGThemeContext';\nimport { lightTheme } from './sgtheme/sgThemes';\nimport TypographyPanel from './typography/TypographyPanel';\nimport importCss from './utils/importCss';\nvar InnerContentPanel = function (_a) {\n    var name = _a.name, sgTheme = _a.sgTheme, children = _a.children;\n    var style = {\n        paddingTop: sgTheme.spacing.space4,\n        paddingRight: sgTheme.spacing.space4,\n        paddingBottom: sgTheme.spacing.space4,\n        paddingLeft: sgTheme.spacing.space4,\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(ContentHeader, null, name && React.createElement(Heading, { as: \"h1\" }, name)),\n        React.createElement(Box, { style: style }, children)));\n};\nvar createComponentRoute = function (name, component, mountPath, sgTheme) {\n    var componentMountPath = mountPath + \"/\" + name.toLowerCase();\n    return (React.createElement(Route, { key: componentMountPath, exact: true, path: componentMountPath, render: function () { return (React.createElement(InnerContentPanel, { name: name, sgTheme: sgTheme }, component)); } }));\n};\nvar StyleGuide = (function (_super) {\n    tslib_1.__extends(StyleGuide, _super);\n    function StyleGuide(props) {\n        var _this = _super.call(this, props) || this;\n        var sgTheme = props.sgTheme;\n        _this.state = {\n            sgTheme: sgTheme || lightTheme,\n        };\n        return _this;\n    }\n    StyleGuide.prototype.getDescription = function () {\n        var _a = this.props, projectName = _a.projectName, description = _a.description;\n        if (description || description === '') {\n            return description;\n        }\n        return \"Styleguide \" + projectName;\n    };\n    StyleGuide.prototype.componentDidMount = function () {\n        var sgTheme = this.state.sgTheme;\n        var fontFamilyCSSImports = sgTheme.fontFamilyCSSImports;\n        importCss('style-guide-fonts', fontFamilyCSSImports);\n        document.title = this.props.projectName + \" | Style-Guide\";\n    };\n    StyleGuide.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, colors = _a.colors, textFonts = _a.textFonts, headlineFonts = _a.headlineFonts, fontMixes = _a.fontMixes, fontSizes = _a.fontSizes, textFontSize = _a.textFontSize, groups = _a.groups, mountPath = _a.mountPath, logo = _a.logo, projectName = _a.projectName;\n        var sgTheme = this.state.sgTheme;\n        var menuGroups = groups.map(function (componentDescription) {\n            var name = componentDescription.name, descriptions = componentDescription.descriptions;\n            var menuItems = descriptions.map(function (description) {\n                var componentMountPath = mountPath + \"/\" + name.toLowerCase() + \"/\" + description.name.toLowerCase();\n                return React.createElement(MenuItem, { key: componentMountPath, to: componentMountPath }, description.name);\n            });\n            return (React.createElement(MenuGroup, { name: name, key: name }, menuItems));\n        });\n        var routes = [];\n        groups.forEach(function (componentDescription) {\n            var name = componentDescription.name, descriptions = componentDescription.descriptions;\n            descriptions.forEach(function (description) {\n                routes.push(createComponentRoute(description.name, description.component, mountPath + \"/\" + name.toLowerCase(), sgTheme));\n            });\n        });\n        return (React.createElement(StyleGuideThemeContext.Provider, { value: sgTheme },\n            React.createElement(Grid, { spacing: 0 },\n                React.createElement(Row, { height: \"100vh\" },\n                    React.createElement(Panel, { width: \"15rem\" },\n                        React.createElement(StyleGuideMenu, null,\n                            React.createElement(MenuHeader, null,\n                                React.createElement(Logo, { to: mountPath }, logo || projectName)),\n                            React.createElement(FelaComponent, { style: { height: sgTheme.spacing.space3 } }),\n                            React.createElement(MenuGroup, { name: \"Base Styles\" },\n                                React.createElement(MenuItem, { to: mountPath + \"/colors\" }, \"Colors\"),\n                                React.createElement(MenuItem, { to: mountPath + \"/typography\" }, \"Typography\")),\n                            menuGroups)),\n                    React.createElement(Panel, null,\n                        React.createElement(ContentPanel, null,\n                            React.createElement(Route, { exact: true, path: mountPath, render: function () { return (React.createElement(InnerContentPanel, { name: _this.getDescription(), sgTheme: sgTheme },\n                                    React.createElement(OverviewPanel, { colors: colors, fontMixes: fontMixes, fontSizes: fontSizes, textFontSize: textFontSize }))); } }),\n                            React.createElement(Route, { exact: true, path: mountPath + \"/colors\", render: function () { return (React.createElement(InnerContentPanel, { name: \"Color Scheme\", sgTheme: sgTheme },\n                                    React.createElement(ColorsPanel, { colors: colors }))); } }),\n                            React.createElement(Route, { exact: true, path: mountPath + \"/typography\", render: function () { return (React.createElement(InnerContentPanel, { name: \"Typography\", sgTheme: sgTheme },\n                                    React.createElement(TypographyPanel, { textFonts: textFonts, headlineFonts: headlineFonts, fontMixes: fontMixes, fontSizes: fontSizes, textFontSize: textFontSize }))); } }),\n                            routes))))));\n    };\n    return StyleGuide;\n}(React.Component));\nexport default StyleGuide;\n",{"version":3,"file":"/home/rpoetz/Development/indoqa/indoqa-react/packages/style-system-demo/src/main/style-guide/StyleGuide.tsx","sourceRoot":"","sources":["/home/rpoetz/Development/indoqa/indoqa-react/packages/style-system-demo/src/main/style-guide/StyleGuide.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAC,MAAM,sBAAsB,CAAA;AAE1D,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAC9B,OAAO,EAAC,aAAa,EAAC,MAAM,YAAY,CAAA;AACxC,OAAO,EAAC,KAAK,EAAC,MAAM,cAAc,CAAA;AAElC,OAAO,WAAW,MAAM,sBAAsB,CAAA;AAC9C,OAAO,aAAa,MAAM,iBAAiB,CAAA;AAC3C,OAAO,YAAY,MAAM,gBAAgB,CAAA;AACzC,OAAO,OAAO,MAAM,WAAW,CAAA;AAC/B,OAAO,IAAI,MAAM,aAAa,CAAA;AAC9B,OAAO,SAAS,MAAM,kBAAkB,CAAA;AACxC,OAAO,UAAU,MAAM,mBAAmB,CAAA;AAC1C,OAAO,QAAQ,MAAM,iBAAiB,CAAA;AACtC,OAAO,cAAc,MAAM,uBAAuB,CAAA;AAClD,OAAO,aAAa,MAAM,0BAA0B,CAAA;AAEpD,OAAO,sBAAsB,MAAM,0BAA0B,CAAA;AAC7D,OAAO,EAAC,UAAU,EAAC,MAAM,oBAAoB,CAAA;AAG7C,OAAO,eAAe,MAAM,8BAA8B,CAAA;AAC1D,OAAO,SAAS,MAAM,mBAAmB,CAAA;AAqBzC,IAAM,iBAAiB,GAAqC,UAAC,EAAyB;QAAxB,cAAI,EAAE,oBAAO,EAAE,sBAAQ;IACnF,IAAM,KAAK,GAAW;QACpB,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM;QAClC,YAAY,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM;QACpC,aAAa,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM;QACrC,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM;KACpC,CAAA;IACD,OAAO,CACL,oBAAC,KAAK,CAAC,QAAQ;QACb,oBAAC,aAAa,QACX,IAAI,IAAI,oBAAC,OAAO,IAAC,EAAE,EAAC,IAAI,IAAE,IAAI,CAAW,CAC5B;QAChB,oBAAC,GAAG,IAAC,KAAK,EAAE,KAAK,IACd,QAAQ,CACL,CACS,CAClB,CAAA;AACH,CAAC,CAAA;AAED,IAAM,oBAAoB,GAAG,UAAC,IAAY,EAAE,SAA0B,EAAE,SAAiB,EAAE,OAAgB;IACzG,IAAM,kBAAkB,GAAM,SAAS,SAAI,IAAI,CAAC,WAAW,EAAI,CAAA;IAC/D,OAAO,CACL,oBAAC,KAAK,IAAC,GAAG,EAAE,kBAAkB,EAAE,KAAK,QAAC,IAAI,EAAE,kBAAkB,EAAE,MAAM,EAAE,cAAM,OAAA,CAC5E,oBAAC,iBAAiB,IAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,IAC5C,SAAS,CACQ,CACrB,EAJ6E,CAI7E,GAAG,CACL,CAAA;AACH,CAAC,CAAA;AAqBD;IAAyB,sCAAmC;IAE1D,oBAAY,KAAY;QAAxB,YACE,kBAAM,KAAK,CAAC,SAKb;QAJQ,IAAA,uBAAO,CAAS;QACvB,KAAI,CAAC,KAAK,GAAG;YACX,OAAO,EAAE,OAAO,IAAI,UAAU;SAC/B,CAAA;;IACH,CAAC;IAEM,mCAAc,GAArB;QACQ,IAAA,eAAuC,EAAtC,4BAAW,EAAE,4BAAyB,CAAA;QAC7C,IAAI,WAAW,IAAI,WAAW,KAAK,EAAE,EAAE;YACrC,OAAO,WAAW,CAAA;SACnB;QACD,OAAO,gBAAc,WAAa,CAAA;IACpC,CAAC;IAEM,sCAAiB,GAAxB;QACS,IAAA,4BAAO,CAAc;QACrB,IAAA,mDAAoB,CAAW;QACtC,SAAS,CAAC,mBAAmB,EAAE,oBAAoB,CAAC,CAAA;QACpD,QAAQ,CAAC,KAAK,GAAM,IAAI,CAAC,KAAK,CAAC,WAAW,mBAAgB,CAAA;IAC5D,CAAC;IAEM,2BAAM,GAAb;QAAA,iBA6FC;QA5FO,IAAA,eAWQ,EAVZ,kBAAM,EACN,wBAAS,EACT,gCAAa,EACb,wBAAS,EACT,wBAAS,EACT,8BAAY,EACZ,kBAAM,EACN,wBAAS,EACT,cAAI,EACJ,4BACY,CAAA;QACP,IAAA,4BAAO,CAAc;QAE5B,IAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,oBAAoB;YAC1C,IAAA,gCAAI,EAAE,gDAAY,CAAwB;YACjD,IAAM,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,UAAC,WAAW;gBAC7C,IAAM,kBAAkB,GAAM,SAAS,SAAI,IAAI,CAAC,WAAW,EAAE,SAAI,WAAW,CAAC,IAAI,CAAC,WAAW,EAAI,CAAA;gBACjG,OAAO,oBAAC,QAAQ,IAAC,GAAG,EAAE,kBAAkB,EAAE,EAAE,EAAE,kBAAkB,IAAG,WAAW,CAAC,IAAI,CAAY,CAAA;YACjG,CAAC,CAAC,CAAA;YACF,OAAO,CACL,oBAAC,SAAS,IAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,IAC7B,SAAS,CACA,CACb,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,IAAM,MAAM,GAAkB,EAAE,CAAA;QAChC,MAAM,CAAC,OAAO,CAAC,UAAC,oBAAoB;YAC3B,IAAA,gCAAI,EAAE,gDAAY,CAAwB;YACjD,YAAY,CAAC,OAAO,CAAC,UAAC,WAAW;gBAC/B,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAC9B,WAAW,CAAC,IAAI,EAChB,WAAW,CAAC,SAAS,EAClB,SAAS,SAAI,IAAI,CAAC,WAAW,EAAI,EACpC,OAAO,CACR,CAAC,CAAA;YACJ,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,OAAO,CACL,oBAAC,sBAAsB,CAAC,QAAQ,IAAC,KAAK,EAAE,OAAO;YAC7C,oBAAC,IAAI,IAAC,OAAO,EAAE,CAAC;gBACd,oBAAC,GAAG,IAAC,MAAM,EAAC,OAAO;oBACjB,oBAAC,KAAK,IAAC,KAAK,EAAC,OAAO;wBAClB,oBAAC,cAAc;4BACb,oBAAC,UAAU;gCACT,oBAAC,IAAI,IAAC,EAAE,EAAE,SAAS,IAAG,IAAI,IAAI,WAAW,CAAQ,CACtC;4BACb,oBAAC,aAAa,IAAC,KAAK,EAAE,EAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM,EAAC,GAAG;4BACzD,oBAAC,SAAS,IAAC,IAAI,EAAC,aAAa;gCAC3B,oBAAC,QAAQ,IAAC,EAAE,EAAK,SAAS,YAAS,aAAmB;gCACtD,oBAAC,QAAQ,IAAC,EAAE,EAAK,SAAS,gBAAa,iBAAuB,CACpD;4BACX,UAAU,CACI,CACX;oBACR,oBAAC,KAAK;wBACJ,oBAAC,YAAY;4BACX,oBAAC,KAAK,IAAC,KAAK,QAAC,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,cAAM,OAAA,CAC1C,oBAAC,iBAAiB,IAAC,IAAI,EAAE,KAAI,CAAC,cAAc,EAAE,EAAE,OAAO,EAAE,OAAO;oCAC9D,oBAAC,aAAa,IACZ,MAAM,EAAE,MAAM,EACd,SAAS,EAAE,SAAS,EACpB,SAAS,EAAE,SAAS,EACpB,YAAY,EAAE,YAAY,GAC1B,CACgB,CACrB,EAT2C,CAS3C,GAAG;4BACJ,oBAAC,KAAK,IAAC,KAAK,QAAC,IAAI,EAAK,SAAS,YAAS,EAAE,MAAM,EAAE,cAAM,OAAA,CACtD,oBAAC,iBAAiB,IAAC,IAAI,EAAC,cAAc,EAAC,OAAO,EAAE,OAAO;oCACrD,oBAAC,WAAW,IAAC,MAAM,EAAE,MAAM,GAAG,CACZ,CACrB,EAJuD,CAIvD,GAAG;4BACJ,oBAAC,KAAK,IAAC,KAAK,QAAC,IAAI,EAAK,SAAS,gBAAa,EAAE,MAAM,EAAE,cAAM,OAAA,CAC1D,oBAAC,iBAAiB,IAAC,IAAI,EAAC,YAAY,EAAC,OAAO,EAAE,OAAO;oCACnD,oBAAC,eAAe,IACd,SAAS,EAAE,SAAS,EACpB,aAAa,EAAE,aAAa,EAC5B,SAAS,EAAE,SAAS,EACpB,SAAS,EAAE,SAAS,EACpB,YAAY,EAAE,YAAY,GAC1B,CACgB,CACrB,EAV2D,CAU3D,GAAG;4BACH,MAAM,CACM,CACT,CACJ,CACD,CACyB,CACnC,CAAA;IACH,CAAC;IACH,iBAAC;AAAD,CAAC,AAvHD,CAAyB,KAAK,CAAC,SAAS,GAuHvC;AAED,eAAe,UAAU,CAAA","sourcesContent":["import {Box, Grid, Panel, Row} from '@indoqa/style-system'\nimport {IStyle} from 'fela'\nimport * as React from 'react'\nimport {FelaComponent} from 'react-fela'\nimport {Route} from 'react-router'\n\nimport ColorsPanel from './colors/ColorsPanel'\nimport ContentHeader from './ContentHeader'\nimport ContentPanel from './ContentPanel'\nimport Heading from './Heading'\nimport Logo from './menu/Logo'\nimport MenuGroup from './menu/MenuGroup'\nimport MenuHeader from './menu/MenuHeader'\nimport MenuItem from './menu/MenuItem'\nimport StyleGuideMenu from './menu/StyleGuideMenu'\nimport OverviewPanel from './overview/OverviewPanel'\nimport {SGTheme} from './sgtheme/SGTheme'\nimport StyleGuideThemeContext from './sgtheme/SGThemeContext'\nimport {lightTheme} from './sgtheme/sgThemes'\nimport {WithSGTheme} from './sgtheme/withSGTheme'\nimport {Color, Font, FontMix, FontSize, FontSizes, Group} from './types'\nimport TypographyPanel from './typography/TypographyPanel'\nimport importCss from './utils/importCss'\n\ninterface Props {\n  projectName: string,\n  description?: string,\n  logo?: React.ReactNode,\n  colors: Color[],\n  textFonts: Font[],\n  headlineFonts: Font[],\n  fontSizes: FontSizes,\n  textFontSize: FontSize,\n  fontMixes: FontMix[],\n  groups: Group[],\n  mountPath: string,\n  sgTheme?: SGTheme,\n}\n\ninterface InnerContentPanelProps extends WithSGTheme {\n  name: string,\n}\n\nconst InnerContentPanel: React.FC<InnerContentPanelProps> = ({name, sgTheme, children}) => {\n  const style: IStyle = {\n    paddingTop: sgTheme.spacing.space4,\n    paddingRight: sgTheme.spacing.space4,\n    paddingBottom: sgTheme.spacing.space4,\n    paddingLeft: sgTheme.spacing.space4,\n  }\n  return (\n    <React.Fragment>\n      <ContentHeader>\n        {name && <Heading as=\"h1\">{name}</Heading>}\n      </ContentHeader>\n      <Box style={style}>\n        {children}\n      </Box>\n    </React.Fragment>\n  )\n}\n\nconst createComponentRoute = (name: string, component: React.ReactNode, mountPath: string, sgTheme: SGTheme) => {\n  const componentMountPath = `${mountPath}/${name.toLowerCase()}`\n  return (\n    <Route key={componentMountPath} exact path={componentMountPath} render={() => (\n      <InnerContentPanel name={name} sgTheme={sgTheme}>\n        {component}\n      </InnerContentPanel>\n    )}/>\n  )\n}\n\n\n/**\n * Todos\n * - make colors and overview mixedFontStyle clickable to get to the details\n *   -> see https://www.webdeveloperpal.com/2018/03/07/react-router-v4-navigate-and-redirect-programmatically/\n * - search box\n * - set <title>\n * - printing\n * - mobile menu -> collapsing\n * - show effective CSS properties\n * - show spacings\n * - inline styles (inkl. ul, ol, link, table, etc.)\n */\n/**\n * see\n * - https://github.com/yeun/open-color\n * - https://www.producthunt.com/posts/fontspark\n * - https://github.com/pitr12/base-styling-components/blob/master/README.md\n */\nclass StyleGuide extends React.Component<Props, WithSGTheme> {\n\n  constructor(props: Props) {\n    super(props)\n    const {sgTheme} = props\n    this.state = {\n      sgTheme: sgTheme || lightTheme,\n    }\n  }\n\n  public getDescription() {\n    const {projectName, description} = this.props\n    if (description || description === '') {\n      return description\n    }\n    return `Styleguide ${projectName}`\n  }\n\n  public componentDidMount() {\n    const {sgTheme} = this.state\n    const {fontFamilyCSSImports} = sgTheme\n    importCss('style-guide-fonts', fontFamilyCSSImports)\n    document.title = `${this.props.projectName} | Style-Guide`\n  }\n\n  public render() {\n    const {\n      colors,\n      textFonts,\n      headlineFonts,\n      fontMixes,\n      fontSizes,\n      textFontSize,\n      groups,\n      mountPath,\n      logo,\n      projectName,\n    } = this.props\n    const {sgTheme} = this.state\n\n    const menuGroups = groups.map((componentDescription) => {\n      const {name, descriptions} = componentDescription\n      const menuItems = descriptions.map((description) => {\n        const componentMountPath = `${mountPath}/${name.toLowerCase()}/${description.name.toLowerCase()}`\n        return <MenuItem key={componentMountPath} to={componentMountPath}>{description.name}</MenuItem>\n      })\n      return (\n        <MenuGroup name={name} key={name}>\n          {menuItems}\n        </MenuGroup>\n      )\n    })\n\n    const routes: JSX.Element[] = []\n    groups.forEach((componentDescription) => {\n      const {name, descriptions} = componentDescription\n      descriptions.forEach((description) => {\n        routes.push(createComponentRoute(\n          description.name,\n          description.component,\n          `${mountPath}/${name.toLowerCase()}`,\n          sgTheme,\n        ))\n      })\n    })\n\n    return (\n      <StyleGuideThemeContext.Provider value={sgTheme}>\n        <Grid spacing={0}>\n          <Row height=\"100vh\">\n            <Panel width=\"15rem\">\n              <StyleGuideMenu>\n                <MenuHeader>\n                  <Logo to={mountPath}>{logo || projectName}</Logo>\n                </MenuHeader>\n                <FelaComponent style={{height: sgTheme.spacing.space3}}/>\n                <MenuGroup name=\"Base Styles\">\n                  <MenuItem to={`${mountPath}/colors`}>Colors</MenuItem>\n                  <MenuItem to={`${mountPath}/typography`}>Typography</MenuItem>\n                </MenuGroup>\n                {menuGroups}\n              </StyleGuideMenu>\n            </Panel>\n            <Panel>\n              <ContentPanel>\n                <Route exact path={mountPath} render={() => (\n                  <InnerContentPanel name={this.getDescription()} sgTheme={sgTheme}>\n                    <OverviewPanel\n                      colors={colors}\n                      fontMixes={fontMixes}\n                      fontSizes={fontSizes}\n                      textFontSize={textFontSize}\n                    />\n                  </InnerContentPanel>\n                )}/>\n                <Route exact path={`${mountPath}/colors`} render={() => (\n                  <InnerContentPanel name=\"Color Scheme\" sgTheme={sgTheme}>\n                    <ColorsPanel colors={colors}/>\n                  </InnerContentPanel>\n                )}/>\n                <Route exact path={`${mountPath}/typography`} render={() => (\n                  <InnerContentPanel name=\"Typography\" sgTheme={sgTheme}>\n                    <TypographyPanel\n                      textFonts={textFonts}\n                      headlineFonts={headlineFonts}\n                      fontMixes={fontMixes}\n                      fontSizes={fontSizes}\n                      textFontSize={textFontSize}\n                    />\n                  </InnerContentPanel>\n                )}/>\n                {routes}\n              </ContentPanel>\n            </Panel>\n          </Row>\n        </Grid>\n      </StyleGuideThemeContext.Provider>\n    )\n  }\n}\n\nexport default StyleGuide\n"]}]}