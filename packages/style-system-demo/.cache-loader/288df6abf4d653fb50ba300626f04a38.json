{"remainingRequest":"/home/rpoetz/Development/indoqa/indoqa-react-fela/node_modules/ts-loader/index.js??ref--4-oneOf-2-1!/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/demo/src/main/words/store/words.epics.ts","dependencies":[{"path":"/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/demo/src/main/words/store/words.epics.ts","mtime":1549207277708},{"path":"/home/rpoetz/Development/indoqa/indoqa-react-fela/node_modules/cache-loader/dist/cjs.js","mtime":1547145562332},{"path":"/home/rpoetz/Development/indoqa/indoqa-react-fela/node_modules/ts-loader/index.js","mtime":1547145562587}],"contextDependencies":[],"result":["import { ofType } from 'redux-observable';\nimport { of } from 'rxjs/internal/observable/of';\nimport { catchError, debounceTime, delay, map, switchMap, takeUntil } from 'rxjs/operators';\nimport { fetchWordsError, fetchWordsSuccess } from './words.actions';\nimport { wordsService$ } from './words.service';\nimport { WordsActionKeys } from './words.types';\nvar fetchWordsEpic$ = function (action$, state, _a) {\n    var ajax = _a.ajax, scheduler = _a.scheduler;\n    return action$.pipe(ofType(WordsActionKeys.FETCH), debounceTime(500, scheduler), switchMap(function (action) {\n        if (action.prefix === '') {\n            return of(fetchWordsSuccess([]));\n        }\n        return wordsService$(ajax, action.prefix).pipe(delay(1500, scheduler), takeUntil(action$.ofType(WordsActionKeys.FETCH_CANCEL)), map(function (words) { return fetchWordsSuccess(words.searchResults.map(function (searchResult) { return searchResult.word; })); }), catchError(function (e) { return of(fetchWordsError(e.message)); }));\n    }));\n};\nexport default [fetchWordsEpic$];\n",{"version":3,"file":"/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/demo/src/main/words/store/words.epics.ts","sourceRoot":"","sources":["/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/demo/src/main/words/store/words.epics.ts"],"names":[],"mappings":"AAAA,OAAO,EAAO,MAAM,EAAC,MAAM,kBAAkB,CAAA;AAC7C,OAAO,EAAC,EAAE,EAAC,MAAM,6BAA6B,CAAA;AAC9C,OAAO,EAAC,UAAU,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAC,MAAM,gBAAgB,CAAA;AAGzF,OAAO,EAAa,eAAe,EAAE,iBAAiB,EAAC,MAAM,iBAAiB,CAAA;AAC9E,OAAO,EAAC,aAAa,EAAC,MAAM,iBAAiB,CAAA;AAC7C,OAAO,EAAc,eAAe,EAAC,MAAM,eAAe,CAAA;AAI1D,IAAM,eAAe,GAAa,UAAC,OAAO,EAAE,KAAK,EAAE,EAAiB;QAAhB,cAAI,EAAE,wBAAS;IACjE,OAAA,OAAO,CAAC,IAAI,CACV,MAAM,CAAa,eAAe,CAAC,KAAK,CAAC,EAGzC,YAAY,CAAC,GAAG,EAAE,SAAS,CAAC,EAC5B,SAAS,CAAC,UAAC,MAAM;QACf,IAAI,MAAM,CAAC,MAAM,KAAK,EAAE,EAAE;YACxB,OAAO,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAA;SACjC;QACD,OAAO,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAE5C,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,EAEtB,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,EACvD,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,iBAAiB,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,UAAC,YAAY,IAAK,OAAA,YAAY,CAAC,IAAI,EAAjB,CAAiB,CAAC,CAAC,EAA/E,CAA+E,CAAC,EAC/F,UAAU,CAAC,UAAC,CAAC,IAAK,OAAA,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAA9B,CAA8B,CAAC,CAAC,CAAA;IACtD,CAAC,CAAC,CACH;AAjBD,CAiBC,CAAA;AAEH,eAAe,CAAC,eAAe,CAAC,CAAA","sourcesContent":["import {Epic, ofType} from 'redux-observable'\nimport {of} from 'rxjs/internal/observable/of'\nimport {catchError, debounceTime, delay, map, switchMap, takeUntil} from 'rxjs/operators'\n\nimport Types from 'Types'\nimport {FetchWords, fetchWordsError, fetchWordsSuccess} from './words.actions'\nimport {wordsService$} from './words.service'\nimport {WordsAction, WordsActionKeys} from './words.types'\n\ninterface TimeEpic extends Epic<Types.RootAction, WordsAction, Types.RootState, Types.Services> {}\n\nconst fetchWordsEpic$: TimeEpic = (action$, state, {ajax, scheduler}) =>\n  action$.pipe(\n    ofType<FetchWords>(WordsActionKeys.FETCH),\n    // the scheduler is only needed for the test environment,\n    // in the browser environment the scheduler is undefined and RxJS uses the default scheduler\n    debounceTime(500, scheduler),\n    switchMap((action) => {\n      if (action.prefix === '') {\n        return of(fetchWordsSuccess([]))\n      }\n      return wordsService$(ajax, action.prefix).pipe(\n        // artificially delay the execution of the ajax request for demo purpose\n        delay(1500, scheduler),\n        // stop this observable stream until the cancel action is triggered\n        takeUntil(action$.ofType(WordsActionKeys.FETCH_CANCEL)),\n        map((words) => fetchWordsSuccess(words.searchResults.map((searchResult) => searchResult.word))),\n        catchError((e) => of(fetchWordsError(e.message))))\n    }),\n  )\n\nexport default [fetchWordsEpic$]\n"]}]}