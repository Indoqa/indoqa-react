{"remainingRequest":"/home/rpoetz/Development/indoqa/indoqa-react-fela/node_modules/ts-loader/index.js??ref--4-oneOf-2-1!/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/style-system-demo/src/main/style-guide/colors/ColorPanel.tsx","dependencies":[{"path":"/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/style-system-demo/src/main/style-guide/colors/ColorPanel.tsx","mtime":1549219331405},{"path":"/home/rpoetz/Development/indoqa/indoqa-react-fela/node_modules/cache-loader/dist/cjs.js","mtime":1547145562332},{"path":"/home/rpoetz/Development/indoqa/indoqa-react-fela/node_modules/ts-loader/index.js","mtime":1547145562587}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport { Box } from '@indoqa/style-system';\nimport * as React from 'react';\nimport { FelaComponent } from 'react-fela';\nimport { withSGTheme } from '../sgtheme/withSGTheme';\nvar toHexString = function (color) {\n    return color.startsWith('#') ? color.substr(1) : color;\n};\nvar calcTextColor = function (color) {\n    if (!color) {\n        return '#fff';\n    }\n    var bigint = parseInt(toHexString(color), 16);\n    var red = (bigint >> 16) & 255;\n    var green = (bigint >> 8) & 255;\n    var blue = bigint & 255;\n    return (red * 0.299 + green * 0.587 + blue * 0.114) > 180 ? '#000' : '#fff';\n};\nvar ColorPanel = function (_a) {\n    var color = _a.color, name = _a.name, sgTheme = _a.sgTheme;\n    var textColor = calcTextColor(color);\n    var style = {\n        boxSizing: 'border-box',\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: '12rem',\n        height: '7rem',\n        backgroundColor: color,\n        textAlign: 'center',\n        textTransform: 'uppercase',\n        padding: sgTheme.spacing.space1,\n        marginRight: sgTheme.spacing.space2,\n        marginBottom: sgTheme.spacing.space2,\n        borderRadius: '3px',\n        border: sgTheme.layout.colorPanelBorder,\n    };\n    return (React.createElement(FelaComponent, { style: style },\n        React.createElement(Box, { style: tslib_1.__assign({}, sgTheme.fontStyles.base, { color: textColor, fontSize: sgTheme.fontSizes.small, marginBottom: 'auto' }) }, name),\n        React.createElement(Box, { style: tslib_1.__assign({}, sgTheme.fontStyles.base, { color: textColor, fontSize: sgTheme.fontSizes.verySmall }) }, color)));\n};\nexport default withSGTheme(ColorPanel);\n",{"version":3,"file":"/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/style-system-demo/src/main/style-guide/colors/ColorPanel.tsx","sourceRoot":"","sources":["/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/style-system-demo/src/main/style-guide/colors/ColorPanel.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAC,GAAG,EAAC,MAAM,sBAAsB,CAAA;AAExC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAC9B,OAAO,EAAC,aAAa,EAAC,MAAM,YAAY,CAAA;AACxC,OAAO,EAAc,WAAW,EAAC,MAAM,wBAAwB,CAAA;AAO/D,IAAM,WAAW,GAAG,UAAC,KAAa;IAChC,OAAO,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;AACxD,CAAC,CAAA;AAKD,IAAM,aAAa,GAAG,UAAC,KAAc;IACnC,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,MAAM,CAAA;KACd;IACD,IAAM,MAAM,GAAG,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAA;IAC/C,IAAM,GAAG,GAAG,CAAC,MAAM,IAAI,EAAE,CAAC,GAAG,GAAG,CAAA;IAChC,IAAM,KAAK,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACjC,IAAM,IAAI,GAAG,MAAM,GAAG,GAAG,CAAA;IACzB,OAAO,CAAC,GAAG,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAA;AAC7E,CAAC,CAAA;AAED,IAAM,UAAU,GAAG,UAAC,EAA6B;QAA5B,gBAAK,EAAE,cAAI,EAAE,oBAAO;IACvC,IAAM,SAAS,GAAG,aAAa,CAAC,KAAK,CAAC,CAAA;IACtC,IAAM,KAAK,GAAW;QACpB,SAAS,EAAE,YAAY;QACvB,OAAO,EAAE,MAAM;QACf,aAAa,EAAE,QAAQ;QACvB,QAAQ,EAAE,OAAO;QACjB,MAAM,EAAE,MAAM;QACd,eAAe,EAAE,KAAK;QACtB,SAAS,EAAE,QAAQ;QACnB,aAAa,EAAE,WAAW;QAC1B,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM;QAC/B,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM;QACnC,YAAY,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM;QACpC,YAAY,EAAE,KAAK;QACnB,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,gBAAgB;KACxC,CAAA;IACD,OAAO,CACL,oBAAC,aAAa,IAAC,KAAK,EAAE,KAAK;QACzB,oBAAC,GAAG,IACF,KAAK,uBACA,OAAO,CAAC,UAAU,CAAC,IAAI,IAC1B,KAAK,EAAE,SAAS,EAChB,QAAQ,EAAE,OAAO,CAAC,SAAS,CAAC,KAAK,EACjC,YAAY,EAAE,MAAM,OAGrB,IAAI,CACD;QACN,oBAAC,GAAG,IACF,KAAK,uBACA,OAAO,CAAC,UAAU,CAAC,IAAI,IAC1B,KAAK,EAAE,SAAS,EAChB,QAAQ,EAAE,OAAO,CAAC,SAAS,CAAC,SAAS,OAGtC,KAAK,CACF,CACQ,CACjB,CAAA;AACH,CAAC,CAAA;AAED,eAAe,WAAW,CAAC,UAAU,CAAC,CAAA","sourcesContent":["import {Box} from '@indoqa/style-system'\nimport {IStyle} from 'fela'\nimport * as React from 'react'\nimport {FelaComponent} from 'react-fela'\nimport {WithSGTheme, withSGTheme} from '../sgtheme/withSGTheme'\n\ninterface Props extends WithSGTheme {\n  color?: string,\n  name: string,\n}\n\nconst toHexString = (color: string) => {\n  return color.startsWith('#') ? color.substr(1) : color\n}\n\n/* tslint:disable:no-bitwise */\n// tslint:disable-next-line\n/* see https://stackoverflow.com/questions/3942878/how-to-decide-font-color-in-white-or-black-depending-on-background-color */\nconst calcTextColor = (color?: string) => {\n  if (!color) {\n    return '#fff'\n  }\n  const bigint = parseInt(toHexString(color), 16)\n  const red = (bigint >> 16) & 255\n  const green = (bigint >> 8) & 255\n  const blue = bigint & 255\n  return (red * 0.299 + green * 0.587 + blue * 0.114) > 180 ? '#000' : '#fff'\n}\n\nconst ColorPanel = ({color, name, sgTheme}: Props) => {\n  const textColor = calcTextColor(color)\n  const style: IStyle = {\n    boxSizing: 'border-box',\n    display: 'flex',\n    flexDirection: 'column',\n    minWidth: '12rem',\n    height: '7rem',\n    backgroundColor: color,\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    padding: sgTheme.spacing.space1,\n    marginRight: sgTheme.spacing.space2,\n    marginBottom: sgTheme.spacing.space2,\n    borderRadius: '3px',\n    border: sgTheme.layout.colorPanelBorder,\n  }\n  return (\n    <FelaComponent style={style}>\n      <Box\n        style={{\n          ...sgTheme.fontStyles.base,\n          color: textColor,\n          fontSize: sgTheme.fontSizes.small,\n          marginBottom: 'auto',\n        }}\n      >\n        {name}\n      </Box>\n      <Box\n        style={{\n          ...sgTheme.fontStyles.base,\n          color: textColor,\n          fontSize: sgTheme.fontSizes.verySmall,\n        }}\n      >\n        {color}\n      </Box>\n    </FelaComponent>\n  )\n}\n\nexport default withSGTheme(ColorPanel)\n"]}]}