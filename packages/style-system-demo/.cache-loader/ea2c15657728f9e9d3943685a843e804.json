{"remainingRequest":"/home/rpoetz/Development/indoqa/indoqa-react-fela/node_modules/ts-loader/index.js??ref--4-oneOf-2-1!/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/demo/src/main/time/store/time.epics.ts","dependencies":[{"path":"/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/demo/src/main/time/store/time.epics.ts","mtime":1549207277784},{"path":"/home/rpoetz/Development/indoqa/indoqa-react-fela/node_modules/cache-loader/dist/cjs.js","mtime":1547145562332},{"path":"/home/rpoetz/Development/indoqa/indoqa-react-fela/node_modules/ts-loader/index.js","mtime":1547145562587}],"contextDependencies":[],"result":["import { forkJoin } from 'rxjs/internal/observable/forkJoin';\nimport { of } from 'rxjs/internal/observable/of';\nimport { switchMap, map, catchError, retry, mergeMap, timeout } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { fetchTimeError, fetchTimeSuccess } from './time.actions';\nimport { geonamesService$ } from './time.service';\nimport { TimeActionKeys } from './time.types';\nvar fetchTimeEpic$ = function (action$, state, _a) {\n    var ajax = _a.ajax;\n    return action$.pipe(ofType(TimeActionKeys.FETCH_TIME), switchMap(function (action) {\n        var _a = action.coordinates, lon = _a.lon, lat = _a.lat;\n        return geonamesService$(ajax, lon, lat).pipe(retry(3), timeout(5000), map(function (result) { return fetchTimeSuccess([result]); }), catchError(function (error) { return of(fetchTimeError(error.message)); }));\n    }));\n};\nvar fetchTimesEpic$ = function (action$, state, _a) {\n    var ajax = _a.ajax;\n    return action$.pipe(ofType(TimeActionKeys.FETCH_TIMES), map(function (action) {\n        return action.coordinates.map(function (coordinates) {\n            var lon = coordinates.lon, lat = coordinates.lat;\n            return geonamesService$(ajax, lon, lat).pipe(retry(3), timeout(5000));\n        });\n    }), mergeMap(function (requests) {\n        return forkJoin(requests).pipe(map(function (results) { return fetchTimeSuccess(results); }), catchError(function (error) { return of(fetchTimeError(error.message)); }));\n    }));\n};\nexport default [fetchTimeEpic$, fetchTimesEpic$];\n",{"version":3,"file":"/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/demo/src/main/time/store/time.epics.ts","sourceRoot":"","sources":["/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/demo/src/main/time/store/time.epics.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,QAAQ,EAAC,MAAM,mCAAmC,CAAA;AAC1D,OAAO,EAAC,EAAE,EAAC,MAAM,6BAA6B,CAAA;AAC9C,OAAO,EAAC,SAAS,EAAE,GAAG,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAC,MAAM,gBAAgB,CAAA;AACnF,OAAO,EAAO,MAAM,EAAC,MAAM,kBAAkB,CAAA;AAG7C,OAAO,EAAY,cAAc,EAAE,gBAAgB,EAAa,MAAM,gBAAgB,CAAA;AACtF,OAAO,EAAC,gBAAgB,EAAC,MAAM,gBAAgB,CAAA;AAC/C,OAAO,EAAa,cAAc,EAAC,MAAM,cAAc,CAAA;AAQvD,IAAM,cAAc,GAAa,UAAC,OAAO,EAAE,KAAK,EAAE,EAAM;QAAL,cAAI;IACrD,OAAA,OAAO,CAAC,IAAI,CACV,MAAM,CAAY,cAAc,CAAC,UAAU,CAAC,EAC5C,SAAS,CAAC,UAAC,MAAM;QACT,IAAA,uBAA+B,EAA9B,YAAG,EAAE,YAAyB,CAAA;QACrC,OAAO,gBAAgB,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CACxC,KAAK,CAAC,CAAC,CAAC,EACR,OAAO,CAAC,IAAI,CAAC,EACb,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,gBAAgB,CAAC,CAAC,MAAM,CAAC,CAAC,EAA1B,CAA0B,CAAC,EAC3C,UAAU,CAAC,UAAC,KAAK,IAAK,OAAA,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAAjC,CAAiC,CAAC,CAC3D,CAAA;IACH,CAAC,CAAC,CACH;AAXD,CAWC,CAAA;AAEH,IAAM,eAAe,GAAa,UAAC,OAAO,EAAE,KAAK,EAAE,EAAM;QAAL,cAAI;IACtD,OAAA,OAAO,CAAC,IAAI,CACV,MAAM,CAAa,cAAc,CAAC,WAAW,CAAC,EAE9C,GAAG,CAAC,UAAC,MAAM;QACT,OAAO,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,UAAC,WAAW;YACjC,IAAA,qBAAG,EAAE,qBAAG,CAAe;YAC9B,OAAO,gBAAgB,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAC1C,KAAK,CAAC,CAAC,CAAC,EACR,OAAO,CAAC,IAAI,CAAC,CACd,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,EAEF,QAAQ,CAAC,UAAC,QAAQ;QAChB,OAAO,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,CAC5B,GAAG,CAAC,UAAC,OAAO,IAAK,OAAA,gBAAgB,CAAC,OAAO,CAAC,EAAzB,CAAyB,CAAC,EAC3C,UAAU,CAAC,UAAC,KAAK,IAAK,OAAA,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAAjC,CAAiC,CAAC,CACzD,CAAA;IACH,CAAC,CAAC,CACH;AAnBD,CAmBC,CAAA;AAEH,eAAe,CAAC,cAAc,EAAE,eAAe,CAAC,CAAA","sourcesContent":["import {forkJoin} from 'rxjs/internal/observable/forkJoin'\nimport {of} from 'rxjs/internal/observable/of'\nimport {switchMap, map, catchError, retry, mergeMap, timeout} from 'rxjs/operators'\nimport {Epic, ofType} from 'redux-observable'\n\nimport Types from 'Types'\nimport {FetchTime, fetchTimeError, fetchTimeSuccess, FetchTimes} from './time.actions'\nimport {geonamesService$} from './time.service'\nimport {TimeAction, TimeActionKeys} from './time.types'\n\ninterface TimeEpic extends Epic<Types.RootAction, TimeAction, Types.RootState, Types.Services> {}\n\n/*\n * Learn more about piping observables:\n * https://blog.hackages.io/rxjs-5-5-piping-all-the-things-9d469d1b3f44\n */\nconst fetchTimeEpic$: TimeEpic = (action$, state, {ajax}) =>\n  action$.pipe(\n    ofType<FetchTime>(TimeActionKeys.FETCH_TIME),\n    switchMap((action) => {\n      const {lon, lat} = action.coordinates\n      return geonamesService$(ajax, lon, lat).pipe(\n          retry(3),\n          timeout(5000),\n          map((result) => fetchTimeSuccess([result])),\n          catchError((error) => of(fetchTimeError(error.message))),\n      )\n    }),\n  )\n\nconst fetchTimesEpic$: TimeEpic = (action$, state, {ajax}) =>\n  action$.pipe(\n    ofType<FetchTimes>(TimeActionKeys.FETCH_TIMES),\n    // produce multiple observables\n    map((action) => {\n      return action.coordinates.map((coordinates) => {\n        const {lon, lat} = coordinates\n        return geonamesService$(ajax, lon, lat).pipe(\n          retry(3),\n          timeout(5000),\n        )\n      })\n    }),\n    // execute multiple requests\n    mergeMap((requests) => {\n      return forkJoin(requests).pipe(\n        map((results) => fetchTimeSuccess(results)),\n        catchError((error) => of(fetchTimeError(error.message))),\n      )\n    }),\n  )\n\nexport default [fetchTimeEpic$, fetchTimesEpic$]\n"]}]}