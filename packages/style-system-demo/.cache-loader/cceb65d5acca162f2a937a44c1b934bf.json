{"remainingRequest":"/home/rpoetz/Development/indoqa/indoqa-react-fela/node_modules/ts-loader/index.js??ref--4-oneOf-2-1!/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/style-system/src/components/grid/ColRow.tsx","dependencies":[{"path":"/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/style-system/src/components/grid/ColRow.tsx","mtime":1548960630819},{"path":"/home/rpoetz/Development/indoqa/indoqa-react-fela/node_modules/cache-loader/dist/cjs.js","mtime":1547145562332},{"path":"/home/rpoetz/Development/indoqa/indoqa-react-fela/node_modules/ts-loader/index.js","mtime":1547145562587}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { FelaComponent } from 'react-fela';\nimport { createPaddingCSSProps, createStylingCSSProps, mergeThemedStyles } from '../base';\nimport { GRID_SIZE } from './Col';\nimport { GridContext } from './GridContext';\nimport { testGridContext } from './testGridContext';\nvar RowContainer = (function (_super) {\n    tslib_1.__extends(RowContainer, _super);\n    function RowContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    RowContainer.prototype.render = function () {\n        var rowStyle = function (_a) {\n            var style = _a.style, spacing = _a.spacing, otherProps = tslib_1.__rest(_a, [\"style\", \"spacing\"]);\n            return (tslib_1.__assign({}, createPaddingCSSProps(otherProps), createStylingCSSProps(otherProps), { boxSizing: 'border-box', display: 'flex', flexWrap: 'wrap', width: '100%', marginTop: spacing, ':first-child': {\n                    marginTop: 0,\n                } }));\n        };\n        var _a = this.props, children = _a.children, style = _a.style, otherProps = tslib_1.__rest(_a, [\"children\", \"style\"]);\n        var styles = mergeThemedStyles(rowStyle, style);\n        return (React.createElement(FelaComponent, tslib_1.__assign({ style: styles }, otherProps), children));\n    };\n    return RowContainer;\n}(React.Component));\nvar ColRow = (function (_super) {\n    tslib_1.__extends(ColRow, _super);\n    function ColRow() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ColRow.prototype.renderChildren = function (spacing) {\n        var currentRowSize = 0;\n        var rowsCount = 0;\n        return React.Children.map(this.props.children, function (child) {\n            var currentChild = child;\n            currentRowSize += currentChild.props.size;\n            if (currentRowSize === GRID_SIZE) {\n                currentRowSize = 0;\n                rowsCount++;\n                return React.cloneElement((currentChild), {\n                    rowBreak: true,\n                    marginTop: rowsCount > 1 ? spacing : 0\n                });\n            }\n            if (currentRowSize >= GRID_SIZE) {\n                rowsCount++;\n            }\n            if (rowsCount > 0) {\n                return React.cloneElement((currentChild), {\n                    marginTop: spacing\n                });\n            }\n            return currentChild;\n        });\n    };\n    ColRow.prototype.render = function () {\n        var _this = this;\n        return (React.createElement(GridContext.Consumer, null, function (_a) {\n            var spacing = _a.spacing;\n            var child = (React.createElement(RowContainer, tslib_1.__assign({ spacing: spacing }, _this.props), _this.renderChildren(spacing)));\n            return testGridContext(spacing, child);\n        }));\n    };\n    return ColRow;\n}(React.Component));\nexport { ColRow };\n",{"version":3,"file":"/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/style-system/src/components/grid/ColRow.tsx","sourceRoot":"","sources":["/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/style-system/src/components/grid/ColRow.tsx"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable */\nimport {IStyle} from 'fela'\nimport * as React from 'react'\nimport {FelaComponent, StyleFunction} from 'react-fela'\n\nimport {BaseTheme} from '../../baseTheme'\nimport {createPaddingCSSProps, createStylingCSSProps, mergeThemedStyles, PaddingProps, StylingProps, WithStyle} from '../base'\nimport {GRID_SIZE} from './Col'\nimport {GridContext} from './GridContext'\nimport {testGridContext} from './testGridContext'\n\ninterface Props<T extends BaseTheme> extends WithStyle<T>, PaddingProps, StylingProps {\n}\n\ninterface RowContainerProps<T extends BaseTheme> extends Props<T> {\n  spacing?: number | string,\n}\n\ninterface RowStyle extends IStyle {\n  ':first-child': IStyle,\n}\n\nclass RowContainer<T extends BaseTheme> extends React.Component<RowContainerProps<T>> {\n\n  public render() {\n    const rowStyle: StyleFunction<BaseTheme, RowContainerProps<T>> = ({style, spacing, ...otherProps}): RowStyle => ({\n      ...createPaddingCSSProps(otherProps),\n      ...createStylingCSSProps(otherProps),\n      boxSizing: 'border-box',\n      display: 'flex',\n      flexWrap: 'wrap',\n      width: '100%',\n      marginTop: spacing,\n      ':first-child': {\n        marginTop: 0,\n      },\n    })\n    const {children, style, ...otherProps} = this.props\n    const styles = mergeThemedStyles<T, RowContainerProps<T>>(rowStyle, style)\n    return (\n      <FelaComponent<T> style={styles} {...otherProps}>\n        {children}\n      </FelaComponent>\n    )\n  }\n}\n\nexport class ColRow<T extends BaseTheme> extends React.Component<Props<T>> {\n\n  renderChildren(spacing: string | number) {\n    let currentRowSize = 0\n    let rowsCount = 0\n\n    // see https://mxstbr.blog/2017/02/react-children-deepdive/#looping-over-children\n    return React.Children.map(this.props.children, (child) => {\n      const currentChild = child as any\n      // calculate the sum of all <Col> sizes\n      currentRowSize += currentChild.props.size\n\n      // the <Col> child fills up the full space -> manipulate rowBreak and marginTop\n      if (currentRowSize === GRID_SIZE) {\n        currentRowSize = 0\n        rowsCount++\n        return React.cloneElement((currentChild), {\n          rowBreak: true,\n          marginTop: rowsCount > 1 ? spacing : 0\n        })\n      }\n\n      // increase the row count if the current <Col> will be rendered at the next line\n      if (currentRowSize >= GRID_SIZE) {\n        rowsCount++\n      }\n\n      // for all rows except the first manipulate the marginTop of the <Col> child\n      if (rowsCount > 0) {\n        return React.cloneElement((currentChild), {\n          marginTop: spacing\n        })\n      }\n      return currentChild\n    })\n  }\n\n  public render() {\n    return (\n      <GridContext.Consumer>\n        {({spacing}) => {\n          const child = (\n            <RowContainer spacing={spacing} {...this.props}>\n              {this.renderChildren(spacing)}\n            </RowContainer>\n          )\n          return testGridContext(spacing, child)\n        }}\n      </GridContext.Consumer>\n    )\n  }\n}\n"]}]}