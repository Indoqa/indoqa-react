{"remainingRequest":"/home/rpoetz/Development/indoqa/indoqa-react-fela/node_modules/ts-loader/index.js??ref--4-oneOf-2-1!/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/style-system-demo/src/main/style-guide/colors/ColorsPanel.tsx","dependencies":[{"path":"/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/style-system-demo/src/main/style-guide/colors/ColorsPanel.tsx","mtime":1549219331405},{"path":"/home/rpoetz/Development/indoqa/indoqa-react-fela/node_modules/cache-loader/dist/cjs.js","mtime":1547145562332},{"path":"/home/rpoetz/Development/indoqa/indoqa-react-fela/node_modules/ts-loader/index.js","mtime":1547145562587}],"contextDependencies":[],"result":["import { Flex } from '@indoqa/style-system';\nimport * as React from 'react';\nimport ColorPanel from './ColorPanel';\nimport SmallColorPanel from './SmallColorPanel';\nvar renderColor = function (color, small) {\n    if (small) {\n        return (React.createElement(SmallColorPanel, { key: color.name, color: color.hexCode }));\n    }\n    return (React.createElement(ColorPanel, { key: color.name, name: color.name, color: color.hexCode }));\n};\nvar ColorsPanel = function (_a) {\n    var colors = _a.colors, small = _a.small;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Flex, null, colors.map((function (color) { return renderColor(color, small); })))));\n};\nColorsPanel.defaultProps = {\n    small: false,\n};\nexport default ColorsPanel;\n",{"version":3,"file":"/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/style-system-demo/src/main/style-guide/colors/ColorsPanel.tsx","sourceRoot":"","sources":["/home/rpoetz/Development/indoqa/indoqa-react-fela/packages/style-system-demo/src/main/style-guide/colors/ColorsPanel.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAC,IAAI,EAAC,MAAM,sBAAsB,CAAA;AACzC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAE9B,OAAO,UAAU,MAAM,cAAc,CAAA;AACrC,OAAO,eAAe,MAAM,mBAAmB,CAAA;AAO/C,IAAM,WAAW,GAAG,UAAC,KAAY,EAAE,KAA0B;IAC3D,IAAI,KAAK,EAAE;QACT,OAAO,CACL,oBAAC,eAAe,IAAC,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,GAAG,CAC1D,CAAA;KACF;IACD,OAAO,CACL,oBAAC,UAAU,IAAC,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,GAAG,CACvE,CAAA;AACH,CAAC,CAAA;AAED,IAAM,WAAW,GAAmC,UAAC,EAAe;QAAd,kBAAM,EAAE,gBAAK;IAEjE,OAAO,CACL,oBAAC,KAAK,CAAC,QAAQ;QACb,oBAAC,IAAI,QACF,MAAM,CAAC,GAAG,CAAC,CAAC,UAAC,KAAK,IAAK,OAAA,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,EAAzB,CAAyB,CAAC,CAAC,CAC9C,CACQ,CAClB,CAAA;AACH,CAAC,CAAA;AAED,WAAW,CAAC,YAAY,GAAG;IACzB,KAAK,EAAE,KAAK;CACb,CAAA;AAED,eAAe,WAAW,CAAA","sourcesContent":["import {Flex} from '@indoqa/style-system'\nimport * as React from 'react'\nimport {Color} from '../types'\nimport ColorPanel from './ColorPanel'\nimport SmallColorPanel from './SmallColorPanel'\n\ninterface Props {\n  colors: Color[]\n  small?: boolean,\n}\n\nconst renderColor = (color: Color, small: boolean | undefined) => {\n  if (small) {\n    return (\n      <SmallColorPanel key={color.name} color={color.hexCode}/>\n    )\n  }\n  return (\n    <ColorPanel key={color.name} name={color.name} color={color.hexCode}/>\n  )\n}\n\nconst ColorsPanel: React.FunctionComponent<Props> = ({colors, small}) => {\n\n  return (\n    <React.Fragment>\n      <Flex>\n        {colors.map(((color) => renderColor(color, small)))}\n      </Flex>\n    </React.Fragment>\n  )\n}\n\nColorsPanel.defaultProps = {\n  small: false,\n}\n\nexport default ColorsPanel\n"]}]}